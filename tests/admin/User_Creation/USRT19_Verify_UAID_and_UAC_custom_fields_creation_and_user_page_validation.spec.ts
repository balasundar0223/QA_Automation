import { test } from "../../../customFixtures/expertusFixture";
import { FakerData } from "../../../utils/fakerUtils";

const testUserName = FakerData.getUserId();
const firstName = FakerData.getFirstName();
const lastName = FakerData.getLastName();

test.describe.serial("USRT19 - Custom Field UAID and UAC User Creation Tests", () => {

    test("USRT19 - Verify UAID and UAC Custom Fields Creation and User Page Validation", async ({
        adminHome,
        customFieldHome,
        createUser,
        contentHome
    }) => {
        test.info().annotations.push(
            { type: `Author`, description: `Tamilvanan` },
            { type: `TestCase`, description: `USRT19 - UAID and UAC Custom Fields with User Validation` },
            { type: `Test Description`, description: `End-to-end testing of UAID and UAC custom field creation with auto-generation and user page validation` }
        );

        // Step 1: Login and Navigate to Custom Field page
        await adminHome.loadAndLogin("CUSTOMERADMIN");
        await adminHome.menuButton();

        // Navigate to Meta Data Library
        await adminHome.metadataLibrary();
        await adminHome.metaDataLibraryOption("Custom Field");

        // Verify Custom Field page loaded
        await customFieldHome.verifyCustomFieldLabel();

        // Step 2: Create or Verify UAID Custom Field
        const uaidCreated = await customFieldHome.createCustomFieldIfNotExists(
            "UAID",
            "Text Box",
            "No",
            true,  // auto generate
            "User", // visible entity
            "7"     // field length
        );

        if (uaidCreated) {
            console.log("UAID custom field created successfully");
        } else {
            console.log("UAID custom field already exists, skipping creation");
        }

        // Step 3: Create or Verify UAC Custom Field
        const uacCreated = await customFieldHome.createCustomFieldIfNotExists(
            "UAC",
            "Text Box",
            "No",
            true,  // auto generate
            "User", // visible entity
            "7"     // field length
        );

        if (uacCreated) {
            console.log("UAC custom field created successfully");
        } else {
            console.log("UAC custom field already exists, skipping creation");
        }

        // Step 4: Navigate to User Creation
        await adminHome.menuButton();
        await adminHome.people();
          await adminHome.user();

        // Create a new user
        await createUser.clickCreateUser();
        await createUser.uncheckInheritAddressIfPresent();
        await createUser.uncheckInheritEmergencyContactIfPresent();
        await createUser.uncheckAutoGenerateUsernameIfPresent();
        await createUser.enter("first_name", firstName);
        await createUser.enter("last_name", lastName);
        await createUser.enter("username", testUserName);
        await createUser.enter("user-password", "Welcome1@");
        await createUser.enter("email", FakerData.getEmail());
        await createUser.enter("user-phone", FakerData.getMobileNumber());

        // Save the user
        await createUser.clickSave();
        await contentHome.gotoListing();

        // Step 6: Edit the created user to verify field persistence
        await createUser.userSearchField(testUserName);
        await createUser.editIcon();

        // Verify edit user page
        await createUser.verifyEditUserLabel();

        // Step 7: Update some other field and verify UAID/UAC remain unchanged
        const updatedPhone = FakerData.getMobileNumber();
        await createUser.enter("user-phone", updatedPhone);
        // Step 5: Verify UAID and UAC fields are present and auto-generated
        const { uaidValue, uacValue } = await createUser.verifyBothCustomFieldsAutoGenerated();
        // Save the updated user
        await createUser.updateUser();
        await contentHome.gotoListing();
        // Step 8: Edit user again to verify UAID/UAC are still unchanged
        await createUser.userSearchField(testUserName);
        await createUser.editIcon();

        // Step 9: Verify UAID and UAC values are preserved and unchanged after update
        await createUser.verifyBothCustomFieldsUnchanged(uaidValue, uacValue, "after user creation");

        // Step 10: Final verification - values should still match original
        await createUser.verifyBothCustomFieldsUnchanged(uaidValue, uacValue, "after updating other fields");

        console.log("✅ All validations passed: UAID and UAC fields are auto-generated and persistent");

        // Step 11: Navigate back to Custom Field page for cleanup
        await adminHome.menuButton();
        await adminHome.metadataLibrary();
        await adminHome.metaDataLibraryOption("Custom Field");

        // Step 12: Disable UAID Custom Field
        await customFieldHome.disableCustomField("UAID");
        await contentHome.gotoListing();

        // Step 13: Disable UAC Custom Field
        await customFieldHome.disableCustomField("UAC");
        await contentHome.gotoListing();

        // Step 14: Click Disabled tab to view disabled fields
        await customFieldHome.clickDisabledTab();

        // Step 15: Delete UAID Custom Field
        await customFieldHome.deleteCustomField("UAID");

        // Step 16: Delete UAC Custom Field
        await customFieldHome.deleteCustomField("UAC");

        console.log("✅ Cleanup completed: UAID and UAC custom fields have been disabled and deleted");
    });
});